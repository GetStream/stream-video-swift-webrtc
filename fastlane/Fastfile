default_platform :ios
skip_docs

require 'json'
require 'net/http'

github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-video-swift-webrtc'
sdk_name = 'WebRTC'
modified_sdk_name = 'StreamWebRTC'
swift_package_path = '../Package.swift'
podspec_path = 'WebRTC.podspec'

lane :release do |options|
  UI.user_error!("You must specify an xcframework path or livekit option") if options[:xcframework_path].nil? && options[:livekit].nil?
  UI.user_error!("You must specify an xcframework version") unless options[:version]
  UI.user_error!("Tag for version #{options[:version]} already exists!") if git_tag_exists(tag: options[:version])
  UI.success("Ignore the red warning above. Tag for version #{options[:version]} is alright!")

  sh("rm -rf *.zip")
  sh("rm -rf *.xcframework")

  code_review

  options[:xcframework_path] = download_framework(version: options[:version]) if options[:livekit]

  options[:xcframework_path] = unzip_xcframework(file_path: options[:xcframework_path])

  options[:xcframework_path] = rename_framework if options[:livekit]

  sign_xcframework(file_path: options[:xcframework_path])

  options[:xcframework_path] = zip_xcframework(file_path: options[:xcframework_path])

  checksum = sh("swift package compute-checksum #{options[:xcframework_path]}").strip

  version_bump_podspec(path: podspec_path, version_number: options[:version])

  file_data = ''
  File.readlines(swift_package_path).each do |line|
    checksum_pattern = /(checksum: ")[a-z0-9]+(")/
    url_pattern = %r{(releases/download/)[.0-9]+(/)}

    formatted_line =
      if line.match(checksum_pattern)
        line.gsub(checksum_pattern, "\\1#{checksum}\\2")
      elsif line.match(url_pattern)
        line.gsub(url_pattern, "\\1#{options[:version]}\\2")
      else
        line
      end

    file_data << formatted_line
  end

  File.open(swift_package_path, 'w') { |file| file << file_data }

  sh('git add -A')
  UI.user_error!("Not committing changes") unless prompt(text: "Will commit changes. All looking good?", boolean: true)
  sh("git commit -m 'Bump #{options[:version]}'")
  UI.user_error!("Not pushing changes") unless prompt(text: "Will push changes. All looking good?", boolean: true)
  sh('git push')

  publish_ios_sdk(
    github_repo: github_repo,
    sdk_names: [sdk_name],
    version: options[:version],
    changelog: "Upgrade to WebRTC v#{options[:version]}\n\nChecksum: #{checksum}",
    upload_assets: "fastlane/#{options[:xcframework_path]}"
  )
end

private_lane :rename_framework do
  old_framework_path = File.expand_path("#{sdk_name}.xcframework")
  new_framework_path = old_framework_path.gsub(/#{sdk_name}/, modified_sdk_name)

  # Rename the framework itself
  File.rename(old_framework_path, new_framework_path)

  # Rename all files with the old framework name with the new one
  ["#{sdk_name}.framework", "#{sdk_name}.h", sdk_name].each do |file_name|
    Dir.glob("#{new_framework_path}/**/*").each do |old_file_path|
      next unless File.basename(old_file_path) == file_name

      new_file_path = old_file_path.reverse.sub(sdk_name.reverse, modified_sdk_name.reverse).reverse
      File.rename(old_file_path, new_file_path)
    end
  end

  # Replace all occurrences of the old framework name with the new one in the plist and modulemap files
  Dir.glob(["#{new_framework_path}/**/Info.plist", "#{new_framework_path}/**/module.modulemap"]).each do |file|
    sh("plutil -convert xml1 #{file}") if file.include?('Info.plist')
    old_text = File.read(file)
    new_text = old_text.gsub(/#{sdk_name}/, modified_sdk_name)
    File.open(file, 'w') { |f| f.puts(new_text) } if old_text != new_text
  end

  # Replace all imports of the old framework with the new one
  Dir.glob("#{new_framework_path}/**/*.h").each do |file|
    old_text = File.read(file)
    new_text = old_text.gsub(/import <#{sdk_name}/, "import <#{modified_sdk_name}")
    File.open(file, 'w') { |f| f.puts(new_text) } if old_text != new_text
  end

  # Rename the rpath for all the frameworks and update symlinks if required
  framework_paths = new_framework_path.include?('.xcframework') ? Dir.glob("#{new_framework_path}/**/*.framework") : [new_framework_path]
  framework_paths.each do |path|
    Dir.chdir(path) do
      if File.symlink?(modified_sdk_name)
        old_symlink = File.readlink(modified_sdk_name)
        new_symlink = old_symlink.reverse.sub(sdk_name.reverse, modified_sdk_name.reverse).reverse

        File.delete(modified_sdk_name)
        File.symlink(new_symlink, modified_sdk_name)
      end

      sh("install_name_tool -id @rpath/#{modified_sdk_name}.framework/#{modified_sdk_name} #{modified_sdk_name}")
    end
  end
  new_framework_path
end

private_lane :sign_xcframework do |options|
  team_id = File.read('Matchfile').match(/team_id\("(.*)"\)/)[1]
  sh("codesign --force --timestamp -v --sign 'Apple Distribution: Stream.io Inc (#{team_id})' #{options[:file_path]}")
end

private_lane :download_framework do |options|
  UI.user_error!("You must specify an xcframework version") unless options[:version]

  url = "https://github.com/webrtc-sdk/Specs/releases/download/#{options[:version]}/#{sdk_name}.xcframework.zip"
  local_file_path = "#{sdk_name}.xcframework.zip"

  sh("wget '#{url}' -O '#{local_file_path}'")
  local_file_path
end

private_lane :unzip_xcframework do |options|
  sh("unzip '#{options[:file_path]}'")
  File.basename(options[:file_path]).gsub('.zip', '')
end

private_lane :zip_xcframework do |options|
  zip_name = "#{options[:file_path]}.zip"
  sh("ditto -c -k --sequesterRsrc --keepParent #{options[:file_path]} #{zip_name}")
  zip_name
end

lane :code_review do
  sh('bundle exec rubocop')
end
